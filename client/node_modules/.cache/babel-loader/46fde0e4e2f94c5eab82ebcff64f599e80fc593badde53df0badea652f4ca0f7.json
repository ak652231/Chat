{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshay Kadam\\\\Desktop\\\\WebDev\\\\chat\\\\client\\\\src\\\\components\\\\chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport io from 'socket.io-client';\nimport { FiSend, FiUser, FiMessageSquare, FiCircle, FiSearch, FiX } from 'react-icons/fi';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentUserId = () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n    const decodedToken = jwtDecode(token);\n    return decodedToken.user.id;\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    return null;\n  }\n};\nconst ChatInterface = () => {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [users, setUsers] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const messagesEndRef = useRef(null);\n  const socketRef = useRef(null);\n  useEffect(() => {\n    // Initialize socket\n    socketRef.current = io('http://localhost:5000');\n    socketRef.current.on('connect', () => {\n      console.log('Connected to socket server');\n    });\n\n    // Listen for incoming messages\n    socketRef.current.on('new_message', message => {\n      if (selectedConversation && message.conversationId === selectedConversation.conversationId) {\n        setMessages(prevMessages => [...prevMessages, message]);\n      }\n    });\n\n    // Cleanup socket on component unmount\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, [selectedConversation]);\n  useEffect(() => {\n    if (!selectedConversation) return;\n\n    // Fetch messages for the selected conversation\n    const fetchMessages = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await fetch(`http://localhost:5000/api/chat/messages/${selectedConversation.conversationId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        setMessages(data);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, [selectedConversation]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  useEffect(() => {\n    // Fetch user list\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/auth/getusers', {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch users');\n        }\n        const data = await response.json();\n        setUsers(data);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      }\n    };\n    fetchUsers();\n  }, []);\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() || !selectedConversation) return;\n    const messageData = {\n      conversationId: selectedConversation.conversationId,\n      senderId: getCurrentUserId(),\n      content: newMessage,\n      timestamp: new Date()\n    };\n\n    // Emit message through socket\n    socketRef.current.emit('chat message', messageData);\n\n    // Update messages locally\n    setMessages(prevMessages => [...prevMessages, messageData]);\n    setNewMessage('');\n  };\n  const handleStartConversation = async user => {\n    const existingConversation = conversations.find(conv => conv.user._id === user._id);\n    if (existingConversation) {\n      setSelectedConversation(existingConversation);\n    } else {\n      const tempConversation = {\n        conversationId: null,\n        user\n      };\n      setSelectedConversation(tempConversation);\n    }\n  };\n  const handleSearch = e => {\n    setSearchQuery(e.target.value);\n    const filtered = users.filter(user => user.username.toLowerCase().includes(e.target.value.toLowerCase()));\n    setSearchResults(filtered);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversations\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search users...\",\n        value: searchQuery,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: (searchQuery ? searchResults : users).map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleStartConversation(user),\n          children: [/*#__PURE__*/_jsxDEV(FiUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), \" \", user.username]\n        }, user._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat\",\n      children: selectedConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [/*#__PURE__*/_jsxDEV(FiMessageSquare, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this), \" Chat with \", selectedConversation.user.username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.senderId === getCurrentUserId() ? 'sent' : 'received'}`,\n            children: message.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type a message...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: /*#__PURE__*/_jsxDEV(FiSend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-placeholder\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a user to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"zAI5JJkDAvHabqqyHqlZZpDe4OI=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jwtDecode","io","FiSend","FiUser","FiMessageSquare","FiCircle","FiSearch","FiX","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentUserId","token","localStorage","getItem","decodedToken","user","id","error","console","ChatInterface","_s","conversations","setConversations","messages","setMessages","selectedConversation","setSelectedConversation","newMessage","setNewMessage","users","setUsers","searchQuery","setSearchQuery","searchResults","setSearchResults","messagesEndRef","socketRef","current","on","log","message","conversationId","prevMessages","disconnect","fetchMessages","response","fetch","method","headers","data","json","_messagesEndRef$curre","scrollIntoView","behavior","fetchUsers","ok","Error","handleSendMessage","trim","messageData","senderId","content","timestamp","Date","emit","handleStartConversation","existingConversation","find","conv","_id","tempConversation","handleSearch","e","target","value","filtered","filter","username","toLowerCase","includes","className","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","index","ref","_c","$RefreshReg$"],"sources":["C:/Users/Akshay Kadam/Desktop/WebDev/chat/client/src/components/chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport io from 'socket.io-client';\r\nimport { FiSend, FiUser, FiMessageSquare, FiCircle, FiSearch, FiX } from 'react-icons/fi';\r\n\r\nconst getCurrentUserId = () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return null;\r\n    const decodedToken = jwtDecode(token);\r\n    return decodedToken.user.id;\r\n  } catch (error) {\r\n    console.error('Error decoding token:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst ChatInterface = () => {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState(null);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [users, setUsers] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const messagesEndRef = useRef(null);\r\n  const socketRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize socket\r\n    socketRef.current = io('http://localhost:5000');\r\n    socketRef.current.on('connect', () => {\r\n      console.log('Connected to socket server');\r\n    });\r\n\r\n    // Listen for incoming messages\r\n    socketRef.current.on('new_message', (message) => {\r\n      if (selectedConversation && message.conversationId === selectedConversation.conversationId) {\r\n        setMessages((prevMessages) => [...prevMessages, message]);\r\n      }\r\n    });\r\n\r\n    // Cleanup socket on component unmount\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n      }\r\n    };\r\n  }, [selectedConversation]);\r\n\r\n  useEffect(() => {\r\n    if (!selectedConversation) return;\r\n\r\n    // Fetch messages for the selected conversation\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/chat/messages/${selectedConversation.conversationId}`,\r\n          {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        setMessages(data);\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n      }\r\n    };\r\n    fetchMessages();\r\n  }, [selectedConversation]);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Fetch user list\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/auth/getusers', {\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n          }\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch users');\r\n        }\r\n        const data = await response.json();\r\n        setUsers(data);\r\n      } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n      }\r\n    };\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!newMessage.trim() || !selectedConversation) return;\r\n\r\n    const messageData = {\r\n      conversationId: selectedConversation.conversationId,\r\n      senderId: getCurrentUserId(),\r\n      content: newMessage,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    // Emit message through socket\r\n    socketRef.current.emit('chat message', messageData);\r\n\r\n    // Update messages locally\r\n    setMessages((prevMessages) => [...prevMessages, messageData]);\r\n    setNewMessage('');\r\n  };\r\n\r\n  const handleStartConversation = async (user) => {\r\n    const existingConversation = conversations.find(\r\n      (conv) => conv.user._id === user._id\r\n    );\r\n\r\n    if (existingConversation) {\r\n      setSelectedConversation(existingConversation);\r\n    } else {\r\n      const tempConversation = {\r\n        conversationId: null,\r\n        user\r\n      };\r\n      setSelectedConversation(tempConversation);\r\n    }\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    setSearchQuery(e.target.value);\r\n    const filtered = users.filter((user) =>\r\n      user.username.toLowerCase().includes(e.target.value.toLowerCase())\r\n    );\r\n    setSearchResults(filtered);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-interface\">\r\n      <div className=\"conversations\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search users...\"\r\n          value={searchQuery}\r\n          onChange={handleSearch}\r\n        />\r\n        <ul>\r\n          {(searchQuery ? searchResults : users).map((user) => (\r\n            <li key={user._id} onClick={() => handleStartConversation(user)}>\r\n              <FiUser /> {user.username}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"chat\">\r\n        {selectedConversation ? (\r\n          <>\r\n            <div className=\"chat-header\">\r\n              <h3>\r\n                <FiMessageSquare /> Chat with {selectedConversation.user.username}\r\n              </h3>\r\n            </div>\r\n            <div className=\"chat-messages\">\r\n              {messages.map((message, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`message ${\r\n                    message.senderId === getCurrentUserId() ? 'sent' : 'received'\r\n                  }`}\r\n                >\r\n                  {message.content}\r\n                </div>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n            <div className=\"chat-input\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type a message...\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n              />\r\n              <button onClick={handleSendMessage}>\r\n                <FiSend />\r\n              </button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"chat-placeholder\">\r\n            <p>Select a user to start chatting</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}